proxy_cache_path /dev/shm/nginx_cache/"nombre de servidor" levels=1:2 keys_zone=nombre de servidor:16m inactive=1d max_size=16m;
#proxy_cache_path: define donde seran almacenados los cahes y con que directivas en este caso en /dev/shm, que es un medio eficiente de pasar datos entre programas. Un programa creará una porción de memoria, a la que otros procesos (si están permitidos) pueden acceder. Esto dará como resultado la aceleración de las cosas en Linux. referencia:https://www.cyberciti.biz/tips/what-is-devshm-and-its-practical-usage.html 
#Ruta: ruta donde se guardaran
#levels= 1:2 :niveles de subdirectorios que se crearan en la ruta para guardar los caches, 
#keys_zone:  ejemplo: nombre que se le dara a tendra cada entrada de cache pero en MD5 con um maximo de 16 MB
#Inactive: Solo se guardaran los cahes anteriores a 1 dia
#max_size: con 16MB maximo de almacenamineto 
server {
# la directiva server define el set de cnfiguraciones para un determinado vhost
    listen      443 ssl http2;
    #listen: define el puerto y el protcolo por el cual va ha aceptar conexiones el servidor 
    #443: https 
    #ssl: Acepta conexiones que funcionan bajo el certificado ssl 
    ssl on;
    #ssl: activa o desactiva el protocolo (on/off)
    status_zone moodle35.testing.mindfree.cl_SSL;
    #status_zone: archiva la recolexion de informacion sobre el estado de la conexion 
    server_name moodle35.testing.mindfree.cl;
    #server_name: define el nombre del vhost
    server_name www.moodle35.testing.mindfree.cl;
    #server_name: define el nombre del servidor 
    ssl_certificate /etc/letsencrypt/live/moodle35.testing.mindfree.cl/fullchain.pem;
    #ssl_certificate: define la ruta donde se alamacena el certificado en el formato PEM para el vhos especifico (fullchain.pem)
    ssl_certificate_key /etc/letsencrypt/live/moodle35.testing.mindfree.cl/privkey.pem;
    #ssl_certificate_key:define la ruta de la llave privada del certificado en formato PEM (privkey.pem)
    ssl_trusted_certificate /etc/letsencrypt/live/moodle35.testing.mindfree.cl/chain.pem;
    #ssl_trusted_certificate: especifica la ruta del certificado otorgado por la entidad certificadora (CA)en el formato PEM (chain.pem), sirve para unificar el estado del certificado  por parte del cliente, solo si la opcion ssl_slapling 
# From https://cipherli.st/
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    #ssl_protocols: activa los protocolos de cifrado seguros en este caso TLSv1 TLSv1.1 TLSv1.2, para mas info:https://revista.seguridad.unam.mx/numero-10/el-cifrado-web-ssltls
    ssl_prefer_server_ciphers on;
    #ssl_prefer_server_ciphers: especifica que protocolos se va a preferir cuando se usan protocolos TLS y SSLv3
    ssl_ciphers 'ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4';
    #ssl_ciphers: especifica las opciones de cifrado archivadas en el formato especificado en openssl, la lista completa de cifrados se puede obtener con el comando openssl ciphess
    ssl_session_cache shared:SSL:10m;
    #ssl_session_cache especifica los tipos y los tamaños de cache que almacena los parametros de la sesion, hay vaores tipo de cache y no se expecifican en la documentacion oficial off/none/buitin/shared pueden ser utilizados artos caches utilizados simultaneamente  
    #shared:SSL:10m : un Cache distribuido en tre todos los procesos, seguido del nombre del almacen (SSL) y en tamaño 10M 1m = 4000 sesiones 
    ssl_stapling on;
    #ssl_stapling: activa o desactiva las repuestas OCSP ademas se debe agregar la directiva "resolver" para que el status pueda resolver y pueda respondel el hostname  
    ssl_stapling_verify on;
    #ssl_stapling_verify: Activa o desactiva la verificacion del status CA
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    #resolver: define el dns para resolver el nombre de los upstream, se puede definir puerto p protocolo de ipv6 se puede desactiva. Por defecto el cache de nginx responde usando el valor proporcionado por el TTLm, el parametro valid permite sobreescrivirlo. 
    resolver_timeout 5s;
    #resolver_timeout: por defecto es 30 seg, define el tiempo en el que se puede resolver el nombre
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    #add_header: Strict-Transport-Security archiva la redirrecicion obliganda por el trafico seguro hsts, para esto debemos asegurar que el sitio completo este en https o la informacion en http no prodra ser visualizada 
    #includeSubDomains: incluye subdominios
    #always esto se le agrega independiente del codigo de resuesta
    add_header X-XSS-Protection "1; mode=block";
    #add_header X-XSS-Protection este header soluciona el problema de vulneravilidad de aplicaciones al impedir inyecciones de codigo en javascript. esta desactivado por defecto, pero este header permite la reactivacion en caso del que el usuario lo destache
    ssl_dhparam /etc/nginx/dhparam.pem;
    #ssl_dhparam:  especifica el archivo con los parametros para el cifrado DHE

## Enables OCSP stapling

    client_max_body_size 2000M;
    #client_max_body_size: establece el tamaño maximo permitido de la solicitud del cliente, si el tamaño excede este valor se retornara en error 413 

#access_log off;
#error_log /var/log/nginx/moodle35.testing.mindfree.cl_ssl.error.log;

    location ~ /.well-known {
    #location: esta directiva estable un set de parametros dependiendo de del request_uri
        root '/var/www/html/mantenimiento';
        #root: define el directorio raiz para las consultas y requerimientos
        allow all;
        #allow: crea una ACL de determinados host o segmentos de red
    }

    proxy_cache_key "$scheme$request_method$host$request_uri";
    #proxy_cache_key: Define una clave para el almacenamiento en caché, por ejemplo "proxy_cache_key "$ host $ request_uri $ cookie_user";"
    location / {
    #location:esta directiva estable un set de parametros dependiendo de del request_uri
        proxy_pass   http://moodle35.testing.hq.mindfree.cl_80;
        #proxy_pass:  Establece el protocolo y la dirección de un servidor proxy y un URI opcional al que se debe asignar una ubicación. Como protocolo, se puede especificar " http" o " https". La dirección se puede especificar como un nombre de dominio o dirección IP, y un puerto opcional:
        proxy_send_timeout      7200;
        #proxy_send_timeout: Establece un tiempo de espera para transmitir una solicitud al servidor proxy. El tiempo de espera se establece solo entre dos operaciones de escritura sucesivas, no para la transmisión de toda la solicitud. Si el servidor proxy no recibe nada dentro de este tiempo, la conexión se cierra.
        proxy_read_timeout      7200;
        #proxy_read_timeout: Define un tiempo de espera para leer una respuesta del servidor proxy. El tiempo de espera se establece solo entre dos operaciones de lectura sucesivas, no para la transmisión de toda la respuesta. Si el servidor proxy no transmite nada dentro de este tiempo, la conexión se cierra.
#proxy_bind 10.1.192.10;
        health_check;
        #health_check Permite revisiones de estado periódicas de los servidores en un grupo al que se hace referencia en la ubicación circundante.
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        index  index.php index.html index.htm;
#location ~ ^/theme/.*\.php(/|$) {
#   proxy_pass   http://ec2-web-01.mindfree.cl_80;
#   proxy_cache moodle35.testing.mindfree.cl;
#   proxy_cache_valid 200 302 301 2d;
#   proxy_cache_purge $purge_method;
#}
    }

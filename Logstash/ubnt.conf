input {
  file {
    type => "UNIFI"
    path => "/var/ossec/logs/ossec.log"
  
  }
}

filter {
        if [type] == "UNIFI" {

		########  A user has connected to an AP #########
		if [message] =~ "has connected to" {
		    mutate { add_tag => "UNIFI_USER" }
		    mutate { add_field => { "ap_user_event" => "connect" } }
		    grok {
		 	break_on_match => true
		        match => [ "message", "\[%{DATA:timestamp},.* User\[%{COMMONMAC:mac}\] has connected to AP\[%{DATA:ap_mac}\] on \"channel %{DATA:channel}\(%{DATA:channel_type}\)\"" ]
		    }
		######## A user has disconnected to an AP #########
		} elseif [message] =~ "disconnected from" {
		    mutate { add_tag => "UNIFI_USER" }
		    mutate { add_field => { "ap_user_event" => "disconnect" } }
		    grok {
		 	break_on_match => true
		        match => [ "message", "\[%{DATA:timestamp},.* User\[%{COMMONMAC:mac}\] disconnected from \"%{DATA:ap_ssid}\" \(%{DATA:duration} connected, %{DATA:bytes} bytes, last AP\[%{COMMONMAC:ap_mac}\]\)" ]
		    }
		######### A user has roamed from one AP to another ############
		} elseif [message] =~ "roams from" {
		    mutate { add_tag => "UNIFI_USER" }
		    mutate { add_field => { "ap_user_event" => "roam" } }
		    grok {
		 	break_on_match => true
		        match => [ "message", "\[%{DATA:timestamp},.* User\[%{COMMONMAC:mac}\] roams from AP\[%{COMMONMAC:ap_mac}\] to AP\[%{COMMONMAC:ap_mac}\] on \"channel %{DATA:channel}\(%{DATA:channel_type}\)\"" ]
		    }
		######## message about the state of an AP #########
		} elseif [message] =~ "CONNECTED" {
		    mutate { add_tag => "UNIFI_AP" }
		    grok {
		 	break_on_match => true
		        match => [ "message", "\[%{DATA:timestamp},.* from \[%{COMMONMAC:mac}\]\(%{DATA:ap_name}, %{DATA:ap_type}, %{DATA:ap_ver}\): state=%{DATA:ap_state}, ext/stun_ip=%{IP:nat_addr}, dev_ip=%{IP:src_addr}, up=%{INT:ap_uptime}" ]
		    }
		######## an AP is slow to respond ###############
		} elseif [message] =~ "INFORM-SLOW" {
		    mutate { add_tag => "UNIFI_AP" }
		    grok {
		 	break_on_match => true
		        match => [ "message", "\[%{DATA:timestamp},.* mac=%{COMMONMAC:mac}\, msec=%{INT:ap_delay}" ]

		    }
		}

		# use the date from the log entry rather than when logstash received it
	        date {
	                match => [ "timestamp", "YYYY-MM-dd HH:mm:ss" ]
			timezone => [ "America/Los_Angeles" ]
	        }
	}
}


output {
  
  elasticsearch {
         hosts => ["10.22.34.49:9200"]
         
    }

}
